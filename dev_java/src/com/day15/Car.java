package com.day15;
// 선언부에 abstract가 오면 추상클래스
// 인터페이스는 생성자를 가질 수 없지만 추상클래스는 생성자를 가질 수 있다
// 일반메소드와 추상메소드 모두를 가질 수 있다
// 그러니까 추상메소드 앞에 abstract는 절대로 생략 할 수 없다( 추상클래스는 일반메소드, 추상메소드 두 개 다 가지므로 구분하기 위해서 )
public abstract class Car implements MoveBehavior{
	public int speed;
	public int whellNum;
	// 추상메소드는 어떤 자동차가 될 지 정할 수 없어서 추상메소드로 하였음. 즉 각 개체마다 다르게 정의 할 수 있도록, 변경에 유리하도록, 재사용성을 높기 위해서 사용
	// 세미콜론으로 끝나는 메소드는 추상메소드이다.
	public abstract void display();
	@Override
	public void run() { // 엑셀을 밟으면 그때마다 호출됨
		speed = speed+1;
	}
}
/*  
 * 인터페이스는 추상클래스보다 더 추상적이다
 *  인터페이스와 추상클래스 공통점은 둘 다 단독으로 인스턴스화 불가함
 *  이것 때문에 다형성이 가능한 것
 *  이것 때문에 구현체 클래스에 따라서 같은 이름의 메소드를 호출하더라도
 *  서로 다른 메소드가 실행되어 다른 기능이 제공되는 것임- 다형성
 *  인터페이스는 오직 추상 메소드만 가질 수 있다 / 그러므로 abstract생략 가능 / 변수를 가질 수 없다
 *  추상클래스가 있어서 다형성이 가능해 진다
 *  추상클래스와 인터페이스 때문에 선언부의 타입과 생성부의 타입이 다를 수 있다
 *  단 자바는 이럴 경우 생성부의 타입으로 객체가 생성된다
 *
 *  클래스 타입 변수명 = new 클래스 타입();
 *  추상클래스 변수명 = new 구현체클래스(); - 다형성이 가능해짐 
 *  인터페이스 변수명 = new 구현체클래스();
 */

